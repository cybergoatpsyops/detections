:PROPERTIES:
:ID:       605a76ec-e291-414d-9682-4304b9237319
:END:
#+title: Detections - Browser Credential Harvesting

* Strategy Abstract
Web browsers today allow users to store their username and passwords, directly to log into their application of choice. Threat actors can retrieve these credentials using either the Windows API or decrypting specific files. This detection strategy focuses on specific files that are needed by the attacker to retrieve the user's web browser stored credentials.
* Technical Context
Threat actors can exploit the stored browser credentials with free and popular tools like SharpChrome, FireFox Decrypt, and Beacon Object Files. The files the detection strategy focuses on are as follows:

1. Chrome's 'Local State' and 'Login Data'
2. Firefox's 'profiles.ini', 'logins.json', and 'key4.db'
3. Microsoft Edge's 'Login Data' and 'Local State'

Enabling SACLs for the above files and aggregating Windows Event ID 4656 and 4663, we can observe when the handle is being requested and attempts to access the objects. This is an observation of possible malicious activity indicative of browser credential theft.
* Threat Intelligence Summary
The browser credential harvesting technique is commonly used by threat actors, penetration testers, and red teamers. Due to the OST being open-sourced, and thus easily and readily accessible, it has been adopted and used by many Threat Actors (TAs). Browsing credential harvesting is a tactic used by various threat actor groups, in part having the ability to extract username and passwords from the user. This technique has been observed among advanced persistent threat (APT) groups, such as APT3, APT33, and APT37.
* Blind Spots
SACLs must be correctly configured on the monitored files to gather events. If SACLs are not set, or set incorrectly, the detection will fail.

This detection will not detect credential harvesting from browsers not covered in testing, such as Opera or Safari, or from third-party password managers.
* False Positives
Legitimate activities such as users accessing their browser password manager. Furthermore, legitimate application interactions or administrative scripts.
* Logs and Events
Windows/4656
Windows/4663
* Detection Query
#+begin_src csharp splunk
(earliest=-7d index=windows EventCode=4663 AND NOT Process_Name IN ("C:\Program Files\Google\Chrome\Application\chrome.exe","*dllhost.exe","*explorer.exe","*MsMpEng.exe","*firefox.exe"))
| regex Object_Name="(?i)^.*(login\sdata|local\sstate|profiles.ini|logins.json|key4.db|(cookies(\.sqlite)?))$"
| rex field=Message "(?i)(?<object>an\sattempt\swas\smade\sto.*)"
| join Object_Name
    [ search index=windows EventCode=4656 | rex field=Message "(?i)(?<handle>a\shandle\sto\san\sobject.*)" ]
| eval processId = tonumber(Process_ID, 16)
| stats count by Account_Name ComputerName processId Process_Name Object_Name handle object
| sort-count#+end_src
#+END_SRC

#+begin_src yaml
title: Browser Credential Harvest
id: 2a80c43b-84d4-432a-b16b-f10ddf5ba390
status: experimental
description: Detects the use of browser credential harvesters like SharpChrome and Firefox Decrypt.
references:
    - https://github.com/unode/firefox_decrypt
    - https://github.com/OTRF/OSSEM-DM/blob/main/use-cases/mitre_attack/attack_events_mapping.csv
    - https://github.com/GhostPack/SharpDPAPI#sharpchrome
    - https://github.com/trustedsec/COFFLoader
    - https://learn.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4663
    - https://learn.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4656
author: Leo Bastidas @cyberGoatPysOps
date: 2023/05/20
modified: 2023/05/23
tags:
    - attack.t1555.003
    - attack.credential_access
logsource:
    product: windows
    service: security
    definition: SACLs will be required on the following files
        - C:\Users\*\AppData\Roaming\Mozilla\Firefox\profiles.ini
        - C:\Users\*\AppData\Roaming\Mozilla\Firefox\*\logins.json
        - C:\Users\*\AppData\Roaming\Mozilla\Firefox\*\key4.db
        - C:\Users\*\AppData\Local\Google\Chrome\User Data\Default\Login Data
        - C:\Users\*\AppData\Local\Google\Chrome\User Data\Local State
        - C:\Users\*\AppData\Local\Microsoft\Edge\User Data\Default\Login Data
        - C:\Users\*\AppData\Local\Microsoft\Edge\User Data\Local State
detection:
    selection1:
        EventID:
            - 4656
            - 4663
    selection2:
        TicketEncryptionType|re: '(?i)^.*(login\sdata|local\sstate|profiles.ini|logins.json|key4.db|(cookies(\.sqlite)?))$'
    filter:
        Process_Name|endswith:
            - '\\Google\\Chrome\\Application\\chrome.exe'
            - 'dllhost.exe'
            - 'explorer.exe'
            - 'MsMpEng.exe'
            - 'firefox.exe'
    condition: all of selection* and not filter
falsepositives:
    - Users accessing their own browser password manager
    - More testing is needed
level: medium
#+end_src

#+begin_src python
!pip install splunklib
!pip install pandasql
!pip install pandas

import splunklib.client as client
import splunklib.results as results
import pandas as pd
import time
from pandasql import sqldf
from sys import displayhook


pd.set_option('display.max_colwidth', None)

service = client.connect(  # Connect to Splunk
    host='192.168.28.132',
    port='8089',
    username='admin',
    password='Changeme1!',
    scheme='https')

# Modify your search query to output results in json
searchquery = "search (earliest=-12h index=windows EventCode=4663 AND NOT Process_Name IN (\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\",\"*dllhost.exe\",\"*explorer.exe\",\"*MsMpEng.exe\",\"*firefox.exe\")) | regex Object_Name=\"(?i)^.*(login\sdata|local\sstate|profiles.ini|logins.json|key4.db|(cookies(\.sqliste)?))$\" | rex field=Message \"(?i)(?<operation>an\sattempt\swas\smade\sto.*)\" | eval processId = tonumber(Process_ID, 16) "

# Create the job with the modified search query
job = service.jobs.create(searchquery)
while not job.is_done():
    time.sleep(2)

# Use the job's results, read into a JSON object
json_results = job.results(output_mode='json')

# Use the JSONResultsReader to parse the JSON results
rr = results.JSONResultsReader(json_results)

data = []

for result in rr:
    if isinstance(result, dict):
        data.append(result)

df_EID4663 = pd.DataFrame(data) # Convert the data to pandas DataFrame and display


searchquery = "search (earliest=-12h index=windows EventCode=4656 AND NOT Process_Name IN (\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\",\"*dllhost.exe\",\"*explorer.exe\",\"*MsMpEng.exe\",\"*firefox.exe\")) | regex Object_Name=\"(?i)^.*(login\sdata|local\sstate|profiles.ini|logins.json|key4.db|(cookies(\.sqliste)?))$\" | rex field=Message \"(?i)(?<operation>a\shandle\sto\san\sobject.*)\" | eval processId = tonumber(Process_ID, 16) "

job = service.jobs.create(searchquery)
while not job.is_done():
    time.sleep(2)

json_results = job.results(output_mode='json')

rr = results.JSONResultsReader(json_results)

data = []

for result in rr:
    if isinstance(result, dict):
        data.append(result)

df_EID4656 = pd.DataFrame(data)


df2_EID4656 = df_EID4656[['_time','host','operation', 'processId', 'Process_Name','Object_Name']] # Select only the columns we want to display
df2_EID4663 = df_EID4663[['_time','host','operation', 'processId', 'Process_Name','Object_Name']]

objects_and_handles = sqldf("SELECT df2_EID4663.processId, df2_EID4663.Process_Name, df2_EID4663.Object_Name, df2_EID4656.operation AS handle_request, df2_EID4663.operation AS object_access FROM df2_EID4656 INNER JOIN df2_EID4663 ON df2_EID4656.processId = df2_EID4663.processId") # Join the two dataframes on the processId column
objects_and_handles = objects_and_handles.drop_duplicates()

displayhook(objects_and_handles) # Display the combined dataframe
#+end_src

* Validation
PS> .\COFFLoader64.exe go ..\git\CS-Remote-OPs-BOF\Remote\chromeKey\chromeKey.x64.o
PS> python3 ..\firefox_decrypt\firefox_decrypt.py C:\Users\loki\AppData\Roaming\Mozilla\Firefox\
PS> .\SharpChrome.exe logins /browser:[chrome or edge]
* Response
Turn on SACL for the 'Local State' file on Chrome and Chrome based browsers (Edge) and Firefox profiles. An example script is below

#+begin_src powershell
$filePath = "C:\Users\loki\AppData\Local\Google\Chrome\User Data\Local State"
$identity = "Everyone"
$rights = "ReadAndExecute"
$type = "Success, Failure"
$rule = New-Object System.Security.AccessControl.FileSystemAuditRule($identity, $rights, $type)
$acl = Get-Acl $filePath
$acl.AddAuditRule($rule)
Set-Acl $filePath $acl
#+end_src
* References
https://attack.mitre.org/techniques/T1555/003/
https://github.com/unode/firefox_decrypt
https://github.com/OTRF/OSSEM-DM/blob/main/use-cases/mitre_attack/attack_events_mapping.csv
https://github.com/GhostPack/SharpDPAPI#sharpchrome
https://github.com/trustedsec/COFFLoader
https://learn.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4663
https://learn.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4656
* Notes
